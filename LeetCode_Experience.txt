*****************************************************************************************************************************************
                                Experience when coding
*****************************************************************************************************************************************
1. Split the algorithm into sub functions as best as you can.
   When implementing each function, you will get much clear mind and would not mess up everything together.
   
2. When solving a problem about optimum solution, the first method comes to your mind should be dynamic programming.
The very first thing about DP is to desolve the original problem into sub problems. 
First write the recursion codes. Based on the recursion codes, you can get which is the smallest problem and you can start from there to write DP.

One thing that you should remember is that not only the problem directly asked by the question can be desolved into sub problems, but also some along problems to solve the original problem can also be desovled and be solved by DP.
One typical example is the "Palindrome_Partitioning_II" problem.

3. When a problem requires O(n) time complexity but you cannot figure it out enen racking your brains, then hash table solution should be the first consideration.
Typical example: Longest Consecutive Sequence

So how to use hash table in C++?
    #include <unordered_map>
    unordered_map<int , bool> hashA;
    int newKey = 1;
    hashA[newKey] = true;  //insert
    if(hashA.find(newKey) != hashA.end())  //search
         hashA[newKey] = false;  //modify

4. Do not be so stingy to use more variables.
     If you only consider to use as less variables as possible, you will reuse a variable which you should, which may leads to panic of program.
     Take the Convert_Sorted_List_to_Binary_Search_Tree project for example. You can compare the original and the modified version.


5. Practice the DP problems as many as possible
When solving DP problem, do not consider too much and let yourself "脑子一团浆糊". Just define sub problems well and when writing codes,
make clear what is current problem and what is sub problem.

For example:
Interleaving string
Decode Ways
  从 decode ways这道题目提交4次才成功可以看出，并没有完全理解这样一个原理：子问题和原问题是一模一样的，不要考虑太多！！！ 比如原问题中如果字符串的第一个字符为0，那么
  字符串的decode ways就为0；同样的，对于子问题也是这样呀。当当前字符为0时，那么从当前字符开始的字符串的decode ways就为0.
Subsets II
Scramble String
Combinations 


6. 有些问题不要一味地追求DP解法，如果说用递归解法的复杂度是常量，与问题规模无关，那么我们就完全可以用递归解法了。
比如Restore IP Addreses. 用递归解法的代码量远比DP解法的代码量小得多.
再比如Unique Binary Search Trees中，用非递归的DP解法会造成大量的树的拷贝，而用递归解法就不用大量拷贝。

另外，求最优解问题时，用动态规划算法的时间复杂度一般都至少为O(n^2)，如果题目要求必须在O(n)内，则可以考虑贪心法。
例如 JumpGames这道题

7. The two directions to split a problem to sub problems:
(1) Decrease the scale of the original problem. The sub problem is the one with a smaller scale
(2) Transform the original data to another data. The sub problem is the one with the same scale as the original problem.

8. 在进行条件判断时，不要老是试图将多个if通过&&或||合并为一行if，这样有很高的概率出错。
   能用多层if就用多层if好么！！！
   Simplify Path这个题目就是充分的例证，一开始写代码的时候用的就是多层if，最后合并成了一行if，出错了吧！！

 9. 对于char* 表示的字符串s，千万不要忘记用*s来获取字符的值，而不是s ！！！！！！！！！！！

 10. 当用sort函数对vector等容器排序时，在compare函数中请一定要用<或>号，不要用<=或>=号。否则会造成panic
        例如 merge interval中，compare函数如果写成
        static bool compare(const Interval& v1, const Interval& v2)
        {
            return v1.start <= v2.start;
        }
        那么程序在v1.start = v2.start时就会panic。如果写成如下形式就不会
        static bool compare(const Interval& v1, const Interval& v2)
        {
            return v1.start < v2.start;
        }

11. Wildcard matching
解题思想其实早就想到了，但是在实现的时候总是没有处理好各种边界条件。多加练习这道题

12. 链表类问题的几种解题思路：
（1） 将链表逆序
（2） 双指针一前一后行进

13. 对一个负数进行移位时，其最高位始终为1不变，这一点一定要注意
例如：
       int a = 0x90000000;
       那么 a>>1 的结果是0x88000000。但是你想要的结果可能是0x40000000。如果不注意的话就会事与愿违了。


14.  利用stack将算法复杂度为O(n^2)的解法化解为复杂度为O(n)的算法
     经典例题：
	 Trapping Rain Water
	 Largest Rectangle in Histogram
	 这两道题利用stack的O(n)复杂度的解法本质上和O(n^2)的解法是相同的，其巧妙之处在于利用stack始终维护
	 我们所需要的性质(对于这两道题均为递降数字序列)，并利用另一个stack记录为了维护这个性质在每两个stack
	 元素之间实际上我们跨过了多少个元素。

15. 在一个数组中寻找具备某个或某几个特性的数字的题目的解法有如下几种：
    (1) 将数组排序然后再寻找
	    这里面包含两种情况：
		a. 数组元素的值不具有规律性，这时利用一般的排序方法即可
		b. 数组元素虽然未排序，但是它们都是连续的数字
		   这时可以先找到最小值，然后根据cur_val - min_val的值将cur_val交换到相应的位置即可。典型
		   例题如“First_Missing_Positive”
	(2) 直接利用二分法寻找
    (4) 经典的双指针法
          Container with most water
          Two Sum

16. 对于数值运算题，请一定思考如下方法是否可行。因为如下方法将会大大提高算法效率：
       将其中的数字或者结果数字表示成二进制表示法。比如int n 可以表示成 n = (bk*2^k + b(k-1)*2^(k-1) + ...... b(1)*2 + b(0)), 其中bi为0或1，而其中2^i其实是左移i位操作！
       经典例题 ： Divide_Two_Integers

17.按照我自己的习惯，有时候为了程序的方便，会设定一个宏表示最大值和最小值。比如
		#define MAX_UNSIGNED_INT  0x7FFFFFFF
	但是如果这个最大/小值参与加减等运算，而不仅仅简单地用来比较时，就会导致加减的结果溢出，从而造成错误判断。
	这时最好将define改为
	    #define MAX_UNSIGNED_INT  0x6FFFFFFF

	例子： 3 Sum Closest

18. Pay highly attention to the bit shift operator >>, especially for the negative number.
In Intel platform, the << operator will directly shift all bits, there is no additional operations by the hardware. However, there is additional operations for >> operator. If the shifted variable is a signed value and it is a negative number, then the highest bit of the results will remain 1. Please note that the original signed bit is also shifted.
int main(int argc, char* argv[])
{
    int c = 0x88000000;
    cout << "The left shifted result of a negative number is:" << endl;
    for (int i = 0; i < 6; i++)
    {
        printf("0x%x ", c);
        c = c << 1;
    }
    cout << endl << endl;

    c = 0x80000008;
    cout << "The right shifted result of a negative number is:" << endl;
    for (int i = 0; i < 10; i++)
    {
        printf("0x%x ", c);
        c = c >> 1;
    }
    cout << endl << endl;

	return 0;
}

Output:
The left shifted result of a negative number is:
0x88000000 0x10000000 0x20000000 0x40000000 0x80000000 0x0

The right shifted result of a negative number is:
0x80000008 0xc0000004 0xe0000002 0xf0000001 0xf8000000 0xfc000000 0xfe000000 0xff000000 0xff800000 0xffc00000

So we highly recommend that when do right shift for a signed number, we should assign it to an unsigned number first and then do right shift for the unsigned number.

*****************************************************************************************************************************************
                                   Specific Problems
*****************************************************************************************************************************************
1. Evaluate Reverse Polish Notation
(1) Did not consider the negative number
    Last executed input:	["3","-4","+"]
	So when converting the string of "-4" to number, the '-' is taken as an operator....

    
3. Reorder_List

    Original codes:
    ListNode* MergeTwoLists(ListNode* root1, ListNode* root2)
    {
        if (root1 == NULL)
        {
            return root2;
        }
        else if (root2 == NULL)
        {
            return root1;
        }

        ListNode* head = NULL, *tail = NULL;

        while(root1 && root2)
        {
            if (head == NULL)
            {
                head = tail = root1;
            }
            else
            {
                tail->next = root1;
                tail = root1;
            }
			
			(In the above tail = root1, here we set tail->next = root2, so makes us lost the original root1->next !!!)

            tail->next = root2;
            tail = root2;

            root1 = root1->next;
            root2 = root2->next;
        }

        if (root1 == NULL)
            tail->next = root2;
        else
            tail->next = root1;

        return head;
    }
	
	Experience:
	In the list operation, when finishing traverse one node, please go to the next node immediately!!!
	
4. Linked List Cycle II
   
   Original Codes:
	//returns the encouter node and how many nodes node1 and nodes2 passed.
    ListNode* GetEncounterNodeDifferentPace(ListNode* node1, ListNode* node2, int& passCount)
    {
        if (node1 == NULL || node2 == NULL)
        {
            passCount = 0;
            return NULL;
        }

        passCount = 0;

        while(node1 && node2)
        {
            passCount++;

            if (node1 == node2)  << Since node1 and node2 both point to head at first. This condition always succeed!!!
            {
                return node1;
            }

            node1 = node1->next;
            if (node1 == NULL)
                return NULL;

            node2 = node2->next;
            if (node2 == NULL)
                return NULL;
            node2 = node2->next;
        }

        return NULL;        
    }

5. Word Break II 
   Input:	"a", ["a"]
   Output:	["a "]
   Expected:	["a"]
   
    vector<string> wordBreak(string s, unordered_set<string> &dict) {
        int n = s.size();
        vector<string> resultCollection;

        if(n == 0)
            return resultCollection;

        vector<string>*  stringBreakStore = new vector<string>[n+1];
        stringBreakStore[n].push_back("");

        string substr, res; int size, len;

        for(int i = n - 1; i >= 0; i--)
        {
            size = n - i;
            for(int j = 0; j < size; j++)
            {
                substr = s.substr(i, j+1);
                if(dict.find(substr) == dict.end())
                    continue;

                if(stringBreakStore[i+j+1].size() == 0)
                    continue;

                len = stringBreakStore[i+j+1].size();
                for(int k = 0; k < len; k++)
                {
                    res.clear();
                    res = substr;
					res += " "; (<<<<<<<<< When stringBreakStore[i+j+1].at(k) is not "" can we add the space)
					res += stringBreakStore[i+j+1].at(k);
                    stringBreakStore[i].push_back(res);
                }
            }
        }

        size = stringBreakStore[0].size();
        for(int i = 0; i < size; i++)
            resultCollection.push_back(stringBreakStore[0].at(i));

        delete [] stringBreakStore;
        return resultCollection;     
    }

    6. Interleaving_String
    See the different versions of the code, we did not consider too well about two character same case.

    7. Minimum Window Substring
    This is a typical and complex code algorithm!

    8. Sort Colors
    虽然代码一次成功，但是自己想出来的这个思想还是应当仔细体会

    9. Search_a_2D_Matrix
    对于mid的值没有处理好导致死循环。

    10. Set matrix zeros
    没有考虑到在利用第一行和第一列作为标记位时，将原值覆盖掉了，从而造成对第一行和第一列的处理错误。

    11. Spiral Matrix
    在对矩形matrix的外圈进行元素遍历时，一定要注意剩余矩阵为一行或一列的情况！！！

	12. 4 Sum
	经典例题。注意在写程序时一定要start从0到n遍历，end从n到0遍历。对比4Sum的最后一个版本和倒数第二个版本你就知道为什么了。